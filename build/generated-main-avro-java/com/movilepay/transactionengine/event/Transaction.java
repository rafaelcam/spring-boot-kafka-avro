/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.movilepay.transactionengine.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6156173947327104326L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"com.movilepay.transactionengine.event\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"},{\"name\":\"account_reference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"CIP_DEPOSIT\",\"BANK_TRANSFER\",\"BILL_PAYMENT\",\"PREPAID_CARD\",\"TED_TRANSFER\",\"P2P_TRANSFER\"]}},{\"name\":\"amount\",\"type\":\"long\"},{\"name\":\"currency\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionCurrency\",\"symbols\":[\"BRL\"]}},{\"name\":\"external_reference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created_at\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},{\"name\":\"events\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TransactionEvent\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transaction_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"},{\"name\":\"payload\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"created_at\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<Transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Transaction> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Transaction to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Transaction from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Transaction instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String account_reference;
  @Deprecated public com.movilepay.transactionengine.event.TransactionType type;
  @Deprecated public long amount;
  @Deprecated public com.movilepay.transactionengine.event.TransactionCurrency currency;
  @Deprecated public java.lang.String external_reference;
  @Deprecated public long created_at;
  @Deprecated public java.util.List<com.movilepay.transactionengine.event.TransactionEvent> events;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param account_reference The new value for account_reference
   * @param type The new value for type
   * @param amount The new value for amount
   * @param currency The new value for currency
   * @param external_reference The new value for external_reference
   * @param created_at The new value for created_at
   * @param events The new value for events
   */
  public Transaction(java.lang.String id, java.lang.String account_reference, com.movilepay.transactionengine.event.TransactionType type, java.lang.Long amount, com.movilepay.transactionengine.event.TransactionCurrency currency, java.lang.String external_reference, java.lang.Long created_at, java.util.List<com.movilepay.transactionengine.event.TransactionEvent> events) {
    this.id = id;
    this.account_reference = account_reference;
    this.type = type;
    this.amount = amount;
    this.currency = currency;
    this.external_reference = external_reference;
    this.created_at = created_at;
    this.events = events;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return account_reference;
    case 2: return type;
    case 3: return amount;
    case 4: return currency;
    case 5: return external_reference;
    case 6: return created_at;
    case 7: return events;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: account_reference = value$ != null ? value$.toString() : null; break;
    case 2: type = (com.movilepay.transactionengine.event.TransactionType)value$; break;
    case 3: amount = (java.lang.Long)value$; break;
    case 4: currency = (com.movilepay.transactionengine.event.TransactionCurrency)value$; break;
    case 5: external_reference = value$ != null ? value$.toString() : null; break;
    case 6: created_at = (java.lang.Long)value$; break;
    case 7: events = (java.util.List<com.movilepay.transactionengine.event.TransactionEvent>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'account_reference' field.
   * @return The value of the 'account_reference' field.
   */
  public java.lang.String getAccountReference() {
    return account_reference;
  }


  /**
   * Sets the value of the 'account_reference' field.
   * @param value the value to set.
   */
  public void setAccountReference(java.lang.String value) {
    this.account_reference = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public com.movilepay.transactionengine.event.TransactionType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.movilepay.transactionengine.event.TransactionType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public long getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(long value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public com.movilepay.transactionengine.event.TransactionCurrency getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(com.movilepay.transactionengine.event.TransactionCurrency value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'external_reference' field.
   * @return The value of the 'external_reference' field.
   */
  public java.lang.String getExternalReference() {
    return external_reference;
  }


  /**
   * Sets the value of the 'external_reference' field.
   * @param value the value to set.
   */
  public void setExternalReference(java.lang.String value) {
    this.external_reference = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public long getCreatedAt() {
    return created_at;
  }


  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(long value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'events' field.
   * @return The value of the 'events' field.
   */
  public java.util.List<com.movilepay.transactionengine.event.TransactionEvent> getEvents() {
    return events;
  }


  /**
   * Sets the value of the 'events' field.
   * @param value the value to set.
   */
  public void setEvents(java.util.List<com.movilepay.transactionengine.event.TransactionEvent> value) {
    this.events = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static com.movilepay.transactionengine.event.Transaction.Builder newBuilder() {
    return new com.movilepay.transactionengine.event.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.movilepay.transactionengine.event.Transaction.Builder newBuilder(com.movilepay.transactionengine.event.Transaction.Builder other) {
    if (other == null) {
      return new com.movilepay.transactionengine.event.Transaction.Builder();
    } else {
      return new com.movilepay.transactionengine.event.Transaction.Builder(other);
    }
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.movilepay.transactionengine.event.Transaction.Builder newBuilder(com.movilepay.transactionengine.event.Transaction other) {
    if (other == null) {
      return new com.movilepay.transactionengine.event.Transaction.Builder();
    } else {
      return new com.movilepay.transactionengine.event.Transaction.Builder(other);
    }
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private java.lang.String id;
    private java.lang.String account_reference;
    private com.movilepay.transactionengine.event.TransactionType type;
    private long amount;
    private com.movilepay.transactionengine.event.TransactionCurrency currency;
    private java.lang.String external_reference;
    private long created_at;
    private java.util.List<com.movilepay.transactionengine.event.TransactionEvent> events;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.movilepay.transactionengine.event.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.account_reference)) {
        this.account_reference = data().deepCopy(fields()[1].schema(), other.account_reference);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.external_reference)) {
        this.external_reference = data().deepCopy(fields()[5].schema(), other.external_reference);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.created_at)) {
        this.created_at = data().deepCopy(fields()[6].schema(), other.created_at);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.events)) {
        this.events = data().deepCopy(fields()[7].schema(), other.events);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.movilepay.transactionengine.event.Transaction other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.account_reference)) {
        this.account_reference = data().deepCopy(fields()[1].schema(), other.account_reference);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.amount)) {
        this.amount = data().deepCopy(fields()[3].schema(), other.amount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.currency)) {
        this.currency = data().deepCopy(fields()[4].schema(), other.currency);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.external_reference)) {
        this.external_reference = data().deepCopy(fields()[5].schema(), other.external_reference);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.created_at)) {
        this.created_at = data().deepCopy(fields()[6].schema(), other.created_at);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.events)) {
        this.events = data().deepCopy(fields()[7].schema(), other.events);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'account_reference' field.
      * @return The value.
      */
    public java.lang.String getAccountReference() {
      return account_reference;
    }


    /**
      * Sets the value of the 'account_reference' field.
      * @param value The value of 'account_reference'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setAccountReference(java.lang.String value) {
      validate(fields()[1], value);
      this.account_reference = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'account_reference' field has been set.
      * @return True if the 'account_reference' field has been set, false otherwise.
      */
    public boolean hasAccountReference() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'account_reference' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearAccountReference() {
      account_reference = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public com.movilepay.transactionengine.event.TransactionType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setType(com.movilepay.transactionengine.event.TransactionType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public long getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setAmount(long value) {
      validate(fields()[3], value);
      this.amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public com.movilepay.transactionengine.event.TransactionCurrency getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setCurrency(com.movilepay.transactionengine.event.TransactionCurrency value) {
      validate(fields()[4], value);
      this.currency = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'external_reference' field.
      * @return The value.
      */
    public java.lang.String getExternalReference() {
      return external_reference;
    }


    /**
      * Sets the value of the 'external_reference' field.
      * @param value The value of 'external_reference'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setExternalReference(java.lang.String value) {
      validate(fields()[5], value);
      this.external_reference = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'external_reference' field has been set.
      * @return True if the 'external_reference' field has been set, false otherwise.
      */
    public boolean hasExternalReference() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'external_reference' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearExternalReference() {
      external_reference = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public long getCreatedAt() {
      return created_at;
    }


    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setCreatedAt(long value) {
      validate(fields()[6], value);
      this.created_at = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearCreatedAt() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'events' field.
      * @return The value.
      */
    public java.util.List<com.movilepay.transactionengine.event.TransactionEvent> getEvents() {
      return events;
    }


    /**
      * Sets the value of the 'events' field.
      * @param value The value of 'events'.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder setEvents(java.util.List<com.movilepay.transactionengine.event.TransactionEvent> value) {
      validate(fields()[7], value);
      this.events = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'events' field has been set.
      * @return True if the 'events' field has been set, false otherwise.
      */
    public boolean hasEvents() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'events' field.
      * @return This builder.
      */
    public com.movilepay.transactionengine.event.Transaction.Builder clearEvents() {
      events = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.account_reference = fieldSetFlags()[1] ? this.account_reference : (java.lang.String) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.movilepay.transactionengine.event.TransactionType) defaultValue(fields()[2]);
        record.amount = fieldSetFlags()[3] ? this.amount : (java.lang.Long) defaultValue(fields()[3]);
        record.currency = fieldSetFlags()[4] ? this.currency : (com.movilepay.transactionengine.event.TransactionCurrency) defaultValue(fields()[4]);
        record.external_reference = fieldSetFlags()[5] ? this.external_reference : (java.lang.String) defaultValue(fields()[5]);
        record.created_at = fieldSetFlags()[6] ? this.created_at : (java.lang.Long) defaultValue(fields()[6]);
        record.events = fieldSetFlags()[7] ? this.events : (java.util.List<com.movilepay.transactionengine.event.TransactionEvent>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.account_reference);

    out.writeEnum(this.type.ordinal());

    out.writeLong(this.amount);

    out.writeEnum(this.currency.ordinal());

    out.writeString(this.external_reference);

    out.writeLong(this.created_at);

    long size0 = this.events.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.movilepay.transactionengine.event.TransactionEvent e0: this.events) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.account_reference = in.readString();

      this.type = com.movilepay.transactionengine.event.TransactionType.values()[in.readEnum()];

      this.amount = in.readLong();

      this.currency = com.movilepay.transactionengine.event.TransactionCurrency.values()[in.readEnum()];

      this.external_reference = in.readString();

      this.created_at = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.movilepay.transactionengine.event.TransactionEvent> a0 = this.events;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.movilepay.transactionengine.event.TransactionEvent>((int)size0, SCHEMA$.getField("events").schema());
        this.events = a0;
      } else a0.clear();
      SpecificData.Array<com.movilepay.transactionengine.event.TransactionEvent> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.movilepay.transactionengine.event.TransactionEvent>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.movilepay.transactionengine.event.TransactionEvent e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.movilepay.transactionengine.event.TransactionEvent();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.account_reference = in.readString();
          break;

        case 2:
          this.type = com.movilepay.transactionengine.event.TransactionType.values()[in.readEnum()];
          break;

        case 3:
          this.amount = in.readLong();
          break;

        case 4:
          this.currency = com.movilepay.transactionengine.event.TransactionCurrency.values()[in.readEnum()];
          break;

        case 5:
          this.external_reference = in.readString();
          break;

        case 6:
          this.created_at = in.readLong();
          break;

        case 7:
          long size0 = in.readArrayStart();
          java.util.List<com.movilepay.transactionengine.event.TransactionEvent> a0 = this.events;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.movilepay.transactionengine.event.TransactionEvent>((int)size0, SCHEMA$.getField("events").schema());
            this.events = a0;
          } else a0.clear();
          SpecificData.Array<com.movilepay.transactionengine.event.TransactionEvent> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.movilepay.transactionengine.event.TransactionEvent>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.movilepay.transactionengine.event.TransactionEvent e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.movilepay.transactionengine.event.TransactionEvent();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










